<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="get" noun="TestMachineOrderDisplayInfo">
        <in-parameters>
            <parameter name="testMachineOrderId" required="true"/>
            <parameter name="itemLimit" type="Integer"/>
            <parameter name="templateSettingSuffix" default-value="TemplateOrderPrint"/>
        </in-parameters>
        <out-parameters>
            <parameter name="testMachineOrderId"/>
            <parameter name="testMachineOrderHeader" type="Map">
                <auto-parameters entity-name="beiyelin.testmachine.TestMachineOrderHeader"/>
            </parameter>
<!--            <parameter name="productStore" type="Map"/>-->
            <parameter name="statusItem" type="Map">
                <auto-parameters entity-name="moqui.basic.StatusItem"/>
            </parameter>
            <parameter name="editableStatusIds" type="Set">
                <parameter name="statusId"/>
            </parameter>
            <parameter name="orderEditable" type="Boolean"/>
            <parameter name="placeWarnings" type="List">
                <parameter name="placeWarning"/>
            </parameter>
            <parameter name="childOrderList" type="List">
                <parameter name="childOrder" type="Map"/>
            </parameter>


            <parameter name="singleLot" type="Boolean"/>
            <parameter name="shipmentMethodEnum" type="Map">
                <auto-parameters entity-name="moqui.basic.Enumeration"/></parameter>
            <parameter name="carrierPartyDetail" type="Map"/>


            <parameter name="vendorFacility" type="Map">
                <auto-parameters entity-name="mantle.facility.Facility"/></parameter>
            <parameter name="vendorFacilityContactInfo" type="Map">
                <parameter name="postalContactMechId"/>
                <parameter name="postalContactMechPurposeId"/>
                <parameter name="postalAddress" type="Map">
                    <auto-parameters entity-name="mantle.party.contact.PostalAddress"/></parameter>
                <parameter name="postalAddressStateGeo" type="Map">
                    <auto-parameters entity-name="moqui.basic.Geo"/></parameter>
                <parameter name="postalAddressGeoPoint" type="Map">
                    <auto-parameters entity-name="moqui.basic.GeoPoint"/></parameter>
                <parameter name="telecomContactMechId"/>
                <parameter name="telecomContactMechPurposeId"/>
                <parameter name="telecomNumber" type="Map">
                    <auto-parameters entity-name="mantle.party.contact.TelecomNumber"/></parameter>
            </parameter>

            <parameter name="customerFacility" type="Map">
                <auto-parameters entity-name="mantle.facility.Facility"/></parameter>
            <parameter name="customerFacilityContactInfo" type="Map">
                <parameter name="postalContactMechId"/>
                <parameter name="postalContactMechPurposeId"/>
                <parameter name="postalAddress" type="Map">
                    <auto-parameters entity-name="mantle.party.contact.PostalAddress"/></parameter>
                <parameter name="postalAddressStateGeo" type="Map">
                    <auto-parameters entity-name="moqui.basic.Geo"/></parameter>
                <parameter name="postalAddressGeoPoint" type="Map">
                    <auto-parameters entity-name="moqui.basic.GeoPoint"/></parameter>
                <parameter name="telecomContactMechId"/>
                <parameter name="telecomContactMechPurposeId"/>
                <parameter name="telecomNumber" type="Map">
                    <auto-parameters entity-name="mantle.party.contact.TelecomNumber"/></parameter>
            </parameter>

            <parameter name="customerDetail" type="Map"><auto-parameters entity-name="mantle.party.PartyDetail"/></parameter>
            <parameter name="customerEmail"/>
            <parameter name="vendorDetail" type="Map"><auto-parameters entity-name="mantle.party.PartyDetail"/></parameter>
            <parameter name="isCustomerInternalOrg" type="Boolean"/>
            <parameter name="isVendorInternalOrg" type="Boolean"/>
            <parameter name="testMachineOrderPartyList" type="List"><parameter name="orderParty">
                <auto-parameters entity-name="beiyelin.testmachine.TestMachineOrderParty"/></parameter></parameter>



            <parameter name="testMachineOrderItemList" type="List">
                <parameter name="testMachineOrderItem" type="Map">
                    <auto-parameters entity-name="beiyelin.testmachine.TestMachineOrderItem"/>
                </parameter>
            </parameter>
            <parameter name="orderItemNoParentCount" type="Integer"/>
            <parameter name="allItemsAuditLogList" type="List">
                <parameter name="testMachineOrderItem" type="Map"/>
            </parameter>
            <parameter name="orderItemWithChildrenSet" type="Set">
                <parameter name="testMachineOrderItemSeqId"/>
            </parameter>

            <parameter name="shipmentItemSourceList" type="List">
                <parameter name="sis" type="Map">
                    <auto-parameters entity-name="mantle.shipment.ShipmentItemSource"/>
                </parameter>
            </parameter>
            <parameter name="shipmentIdSet" type="Set">
                <parameter name="shipmentId"/>
            </parameter>
            <parameter name="quantityNotShippedByItem" type="Map">
                <description>Key is testMachineOrderItemSeqId, value is quantity not shipped for item.</description>
            </parameter>
<!--            <parameter name="quantityNotShippedByPart" type="Map">-->
<!--                <description>Key is orderPartSeqId, value is quantity not shipped for all items in part.</description>-->
<!--            </parameter>-->

<!--            <parameter name="orderItemBillingList" type="List">
                <parameter name="oib" type="Map">
                    <auto-parameters entity-name="mantle.order.OrderItemBilling"/>
                </parameter>
            </parameter>-->

            <parameter name="testMachineReturnItemList" type="List">
                <parameter name="testMachineReturnItem" type="Map">
                    <auto-parameters entity-name="beiyelin.testmachine.TestMachineReturnItem"/>
                </parameter>
            </parameter>

<!--            <parameter name="requestItemOrderList" type="List">
                <parameter name="rio" type="Map">
                    <auto-parameters entity-name="mantle.request.RequestItemOrder"/>
                </parameter>
            </parameter>-->
<!--            <parameter name="requestIdSet" type="Set">
                <parameter name="requestId"/>
            </parameter>-->

            <parameter name="statusHistoryList" type="List">
                <parameter name="auditLog" type="Map">
                    <auto-parameters entity-name="moqui.entity.EntityAuditLog"/>
                </parameter>
            </parameter>
            <parameter name="orderNoteList" type="List">
                <parameter name="orderNote" type="Map">
                    <auto-parameters entity-name="beiyelin.testmachine.TestMachineOrderNote"/>
                </parameter>
            </parameter>



            <parameter name="templateLocation">
                <description>Looked up from ProductStoreSetting and if no setting found for store or
                    no store is associated with the TestMachineOrder then from PartySetting (for vendorPartyId).
                </description>
            </parameter>
        </out-parameters>
        <actions>
            <set field="placeWarnings" from="[]"/>

            <entity-find-one entity-name="beiyelin.testmachine.TestMachineOrderHeader" value-field="testMachineOrderHeader"/>
            <if condition="testMachineOrderHeader == null">
                <return error="true" message="TestMachineOrder not found with ID ${testMachineOrderId}"/>
            </if>


            <!--
            <set field="headerMaster" from="testMachineOrderHeader.getMasterValueMap('default')"/>
            <log message="======== TestMachineOrder Master:\n${groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(headerMaster))}"/>
            -->

            <set field="statusItem" from="testMachineOrderHeader.status"/>

            <!-- NOTE: these statuses are fairly liberal, may want to restrict more in certain scenarios (such as customer changing an order) -->
            <set field="editableStatusIds" from="new HashSet(['TMOHSOpen',
                 'TMOHSConfirmed' ])"/>
            <set field="orderEditable" from="editableStatusIds.contains(testMachineOrderHeader.statusId)"/>

            <entity-find entity-name="beiyelin.testmachine.TestMachineOrderHeader" list="childOrderList">
                <econdition field-name="parentOrderId" from="testMachineOrderId"/>
                <order-by field-name="requestDate"/>
            </entity-find>


            <entity-find entity-name="beiyelin.testmachine.TestMachineOrderItem" list="testMachineOrderItemList">
                <econdition field-name="testMachineOrderId"/>
                <order-by field-name="testMachineOrderItemSeqId"/>
            </entity-find>

            
            <if condition="!testMachineOrderItemList">
                <script>placeWarnings.add(ec.resource.expand('OrderPlaceNoItems', null))</script>
            </if>
            <entity-find entity-name="moqui.entity.EntityAuditLog" list="allItemsAuditLogList">
                <econdition field-name="changedEntityName" value="beiyelin.testmachine.TestMachineOrderItem"/>
                <econdition field-name="changedFieldName" operator="in" value="quantity,unitPrice"/>
                <econdition field-name="pkPrimaryValue" from="testMachineOrderId"/>
                <select-field
                        field-name="changedFieldName,pkSecondaryValue,newValueText,oldValueText,changeReason,changedByUserId,changedDate"/>
                <order-by field-name="-changedDate"/>
            </entity-find>



            <!-- get ShipmentItemSource list and derived data -->
            <entity-find entity-name="mantle.shipment.ShipmentAndItemSource" list="shipmentItemSourceList">
                <econdition field-name="testMachineOrderId"/>
                <econdition field-name="shipmentStatusId" operator="not-in" value="ShipRejected,ShipCancelled"/>
                <econdition field-name="statusId" operator="not-equals" value="SisCancelled"/>
            </entity-find>
            <set field="shipmentIdSet" from="new TreeSet()"/>
            <set field="quantityNotShippedByItem" from="[:]"/>
            <script>
                for (testMachineOrderItem in testMachineOrderItemList) {
                    def orderItemQuantity = testMachineOrderItem.quantity != null ? testMachineOrderItem.quantity : 1.0
                    addToBigDecimalInMap(testMachineOrderItem.testMachineOrderItemSeqId, orderItemQuantity, quantityNotShippedByItem)
                }
            </script>
            <iterate list="shipmentItemSourceList" entry="shipmentItemSource">
                <script>
                    def curOrderItem = testMachineOrderItemList.find({ it.testMachineOrderItemSeqId == shipmentItemSource.testMachineOrderItemSeqId })
                    shipmentIdSet.add(shipmentItemSource.shipmentId)
                    if (curOrderItem != null) {
                        addToBigDecimalInMap(curOrderItem.testMachineOrderItemSeqId, -shipmentItemSource.quantity, quantityNotShippedByItem)

                    }
                </script>
            </iterate>


            <!-- get ReturnItem list -->
            <entity-find entity-name="beiyelin.testmachine.TestMachineReturnItem" list="testMachineReturnItemList">
                <econdition field-name="testMachineOrderId"/>
<!--                <econdition field-name="statusId" operator="not-equals" value="ReturnCancelled"/>-->
                <order-by field-name="testMachineOrderItemSeqId"/>
            </entity-find>

<!--            &lt;!&ndash; get RequestItemOrder list and derived data &ndash;&gt;
            <entity-find entity-name="mantle.request.RequestItemOrder" list="requestItemOrderList">
                <econdition field-name="testMachineOrderId"/>
            </entity-find>
            <set field="requestIdSet" from="new TreeSet()"/>
            <iterate list="requestItemOrderList" entry="requestItemOrder">
                <script>requestIdSet.add(requestItemOrder.requestId)</script>
            </iterate>-->

            <!-- get order status history from EntityAuditLog -->
            <entity-find entity-name="moqui.entity.EntityAuditLog" list="statusHistoryList">
                <econdition field-name="changedEntityName" value="beiyelin.testmachine.TestMachineOrderHeader"/>
                <econdition field-name="changedFieldName" value="statusId"/>
                <econdition field-name="pkPrimaryValue" from="testMachineOrderId"/>
                <order-by field-name="changedDate"/>
            </entity-find>

            <entity-find entity-name="beiyelin.testmachine.TestMachineOrderNote" list="orderNoteList">
                <econdition field-name="testMachineOrderId"/>
                <order-by field-name="-noteDate"/>
            </entity-find>

<!--            get testMachineOrder info  for more detailed display-->
            <script><![CDATA[
                import org.moqui.entity.EntityList
                import org.moqui.entity.EntityValue
                import org.moqui.context.ExecutionContext

                ExecutionContext ec = context.ec


                EntityValue headerStatusItem = (EntityValue) testMachineOrderHeader.status

                EntityValue customerDetail = ec.entity.find("mantle.party.PartyDetail").condition("partyId", testMachineOrderHeader.customerPartyId).one()
                EntityValue vendorDetail = ec.entity.find("mantle.party.PartyDetail").condition("partyId", testMachineOrderHeader.vendorPartyId).one()
                boolean isCustomerInternalOrg = ec.entity.find("mantle.party.PartyRole")
                        .condition("partyId", testMachineOrderHeader.customerPartyId).condition("roleTypeId", "OrgInternal").one() as boolean
                boolean isVendorInternalOrg = ec.entity.find("mantle.party.PartyRole")
                        .condition("partyId", testMachineOrderHeader.vendorPartyId).condition("roleTypeId", "OrgInternal").one() as boolean


                String shipToPartyId = testMachineOrderHeader.customerPartyId


                String customerEmail = null
                if (testMachineOrderHeader.customerPartyId) {
                    customerEmail = ec.service.sync().name("mantle.party.ContactServices.get#PartyContactInfo")
                            .parameter("partyId", testMachineOrderHeader.customerPartyId).parameter("emailContactMechPurposeId", "EmailOrder")
                            .parameter("defaultToPrimaryPurpose", true).call()?.emailAddress
                }

                EntityValue carrierPartyDetail = null
                if (testMachineOrderHeader.carrierPartyId && testMachineOrderHeader.carrierPartyId != "_NA_")
                    carrierPartyDetail = ec.entity.find("mantle.party.PartyDetail").condition("partyId", testMachineOrderHeader.carrierPartyId).one()


                if (!testMachineOrderHeader.vendorPartyId) placeWarnings.add(ec.resource.expand('TestMachineOrderPlaceNoVendor', null, [testMachineOrderHeader: testMachineOrderHeader]))
                if (!testMachineOrderHeader.customerPartyId) placeWarnings.add(ec.resource.expand('TestMachineOrderPlaceNoCustomer', null, [testMachineOrderHeader: testMachineOrderHeader]))

                if (!isCustomerInternalOrg )
                    placeWarnings.add(ec.resource.expand('TestMachineOrderPlaceNoShippingAddress', null, [testMachineOrderHeader: testMachineOrderHeader]))
                if (!isCustomerInternalOrg && !testMachineOrderHeader.shipmentMethodEnumId)
                    placeWarnings.add(ec.resource.expand('TestMachineOrderPlaceNoShippingMethod', null, [testMachineOrderHeader: testMachineOrderHeader]))

                List orderItemSeqIdList = partOrderItemList*.testMachineOrderItemSeqId
                List partShipmentItemSourceList = []
                Set partShipmentIdSet = new TreeSet()
                for (EntityValue sis in shipmentItemSourceList) if (sis.testMachineOrderItemSeqId in orderItemSeqIdList) {
                    partShipmentItemSourceList.add(sis)
                    partShipmentIdSet.add(sis.shipmentId)
                }

                EntityValue vendorFacility = (EntityValue) testMachineOrderHeader.'vendorFacility'
                Map vendorFacilityContactInfo = null
                if (facility) {
                    Map facShipOut = ec.service.sync().name("mantle.facility.ContactServices.get#FacilityDefaultShipDest")
                            .parameter("facilityId", testMachineOrderHeader.vendorFacilityId).call()
                    vendorFacilityContactInfo = ec.service.sync().name("mantle.facility.ContactServices.get#FacilityContactInfo")
                            .parameters([facilityId          : testMachineOrderHeader.vendorFacilityId, postalContactMechId: facShipOut.postalContactMechId,
                                         telecomContactMechId: facShipOut.telecomContactMechId]).call()
                }
                EntityValue customerFacility = (EntityValue) testMachineOrderHeader.'customerFacility'
                Map customerFacilityContactInfo = null
                if (facility) {
                    Map facShipOut = ec.service.sync().name("mantle.facility.ContactServices.get#FacilityDefaultShipDest")
                            .parameter("facilityId", testMachineOrderHeader.customerFacilityId).call()
                    customerFacilityContactInfo = ec.service.sync().name("mantle.facility.ContactServices.get#FacilityContactInfo")
                            .parameters([facilityId          : testMachineOrderHeader.customerFacilityId, postalContactMechId: facShipOut.postalContactMechId,
                                         telecomContactMechId: facShipOut.telecomContactMechId]).call()
                }


                // find applicable open returns
                Map openReturnsResult = ec.service.sync().name("beiyelin.testmachine.TestMachineReturnServices.find#TestMachineOrderOpenTestMachineReturns")
                        .parameters([testMachineOrderId: testMachineOrderHeader.testMachineOrderId]).call()


                ]]></script>


            <!-- Get templateLocation from settings -->
            <set field="templateLocation" from="null"/>
            <!-- see if a template is configured by ProductStoreSetting -->
<!--            <if condition="testMachineOrderHeader.productStoreId">
                <entity-find entity-name="mantle.product.store.ProductStoreSetting" list="productStoreSettingList"
                             cache="true">
                    <date-filter/>
                    <econdition field-name="productStoreId" from="testMachineOrderHeader.productStoreId"/>
                    <econdition field-name="settingTypeEnumId" value="Psst${templateSettingSuffix}"/>
                    <order-by field-name="-fromDate"/>
                </entity-find>
                <if condition="productStoreSettingList">
                    <set field="templateLocation" from="productStoreSettingList[0].settingValue"/>
                </if>
            </if>-->
            <!-- if no template setting for store look for PartySetting on Shipment.fromPartyId -->
<!--
            <if condition="!templateLocation &amp;&amp; firstPart.vendorPartyId">
                <service-call name="mantle.party.PartyServices.get#PartySettingValue" out-map="ptySettingOut"
                              in-map="[partyId:firstPart.vendorPartyId, partySettingTypeId:('Org' + templateSettingSuffix)]"/>
                <set field="templateLocation" from="ptySettingOut?.settingValue"/>
            </if>
-->
        </actions>
    </service>
    <service verb="get" noun="TestMachineOrderItemsTotalCount">
        <in-parameters>
            <parameter name="testMachineOrderId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="itemCount" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <set field="itemCount" from="0.0"/>
            <entity-find entity-name="beiyelin.testmachine.TestMachineOrderItem" list="testMachineOrderItemList">
                <econdition field-name="testMachineOrderId"/>
            </entity-find>
            <iterate list="testMachineOrderItemList" entry="testMachineOrderItem">
                <set field="itemCount" from="itemCount + testMachineOrderItem.quantity"/>
            </iterate>
        </actions>
    </service>
    <service verb="get" noun="TestMachineOrderItemDisplayInfo">
        <in-parameters>
            <parameter name="testMachineOrderId" required="true"/>
            <parameter name="testMachineOrderItemSeqId" required="true"/>
            <parameter name="testMachineOrderItem" type="EntityValue"/>
        </in-parameters>
        <out-parameters>
            <parameter name="testMachineOrderItem" type="EntityValue"/>
            <parameter name="product" type="EntityValue"/>


            <parameter name="itemQuantityAuditList" type="List">
                <parameter name="itemQuantityAudit" type="Map">
                    <parameter name="auditLog" type="Map"/>
                    <parameter name="userAccount" type="Map"/>
                    <parameter name="changeReasonEnum" type="Map"/>
                </parameter>
            </parameter>
            <parameter name="itemUnitPriceAuditList" type="List">
                <parameter name="itemunitPriceAudit" type="Map">
                    <parameter name="auditLog" type="Map"/>
                    <parameter name="userAccount" type="Map"/>
                    <parameter name="changeReasonEnum" type="Map"/>
                </parameter>
            </parameter>

            <parameter name="orderItemQuantity" type="BigDecimal"/>
            <parameter name="orderItemTotal" type="BigDecimal"/>
            <parameter name="itemQuantityShipped" type="BigDecimal"/>
            <parameter name="itemQuantityNotShipped" type="BigDecimal"/>

            <parameter name="resInfoList" type="List">
                <parameter name="resInfo" type="Map">
                    <parameter name="existingRes" type="Map"/>
                    <parameter name="assetLot" type="Map"/>
                </parameter>
            </parameter>

            <parameter name="testMachineReturnItemList" type="List">
                <parameter name="testMachineReturnItem" type="Map"/>
            </parameter>
            <parameter name="returnIdSet" type="Set">
                <parameter name="returnId"/>
            </parameter>
            <parameter name="returnableOut" type="Map">
                <description>Result from beiyelin.testmachine.TestMachineReturnServices.calculate#OrderItemReturnable</description>
            </parameter>

            <parameter name="itemCanDelete" type="Boolean"/>
        </out-parameters>
        <actions>
            <set field="editableStatusIds" from="['TMOHSOpen',
                    'TMOHSConfirmed' ]"/>


            <if condition="testMachineOrderItem == null">
                <entity-find-one entity-name="beiyelin.testmachine.TestMachineOrderItem" value-field="testMachineOrderItem"/>
            </if>


            <set field="product" from="testMachineOrderItem.product"/>

            <!-- item quantity and unitPrice EntityAuditLog records -->
            <entity-find entity-name="moqui.entity.EntityAuditLog" list="itemAuditLogList">
                <econdition field-name="changedEntityName" value="beiyelin.testmachine.TestMachineOrderItem"/>
                <econdition field-name="changedFieldName" operator="in" value="quantity,unitPrice"/>
                <econdition field-name="pkPrimaryValue" from="testMachineOrderId"/>
                <econdition field-name="pkSecondaryValue" from="testMachineOrderItemSeqId"/>
                <select-field
                        field-name="changedFieldName,pkSecondaryValue,newValueText,oldValueText,changeReason,changedByUserId,changedDate"/>
                <order-by field-name="-changedDate"/>
            </entity-find>
            <set field="itemQuantityAuditList" from="[]"/>
            <set field="itemUnitPriceAuditList" from="[]"/>
            <iterate list="itemAuditLogList" entry="auditLog">
                <entity-find-one entity-name="mantle.party.PersonWithUserAccount" value-field="userAccount">
                    <field-map field-name="userId" from="auditLog.changedByUserId"/>
                </entity-find-one>
                <entity-find-one entity-name="moqui.basic.Enumeration" value-field="changeReasonEnum">
                    <field-map field-name="enumId" from="auditLog.changeReason"/>
                </entity-find-one>
                <if condition="auditLog.changedFieldName == 'quantity'">
                    <then>
                        <script>itemQuantityAuditList.add([auditLog: auditLog, userAccount: userAccount, changeReasonEnum: changeReasonEnum])</script>
                    </then>
                    <else>
                        <script>itemUnitPriceAuditList.add([auditLog: auditLog, userAccount: userAccount, changeReasonEnum: changeReasonEnum])</script>
                    </else>
                </if>
            </iterate>


            <set field="orderItemQuantity" from="quantity"/>
            <set field="orderItemTotal" from="amount"/>

            <entity-find entity-name="mantle.shipment.ShipmentAndItemSource" list="shipmentItemSourceList">
                <econdition field-name="testMachineOrderId"/>
                <econdition field-name="testMachineOrderItemSeqId"/>
                <econdition field-name="shipmentStatusId" operator="not-in" value="ShipRejected,ShipCancelled"/>
                <econdition field-name="statusId" operator="not-equals" value="SisCancelled"/>
            </entity-find>
            <set field="itemQuantityShipped"
                 from="shipmentItemSourceList ? shipmentItemSourceList*.quantity.sum() : 0.0"/>
            <set field="itemQuantityNotShipped" from="orderItemQuantity - itemQuantityShipped"/>

<!--get Reservation msg-->
                <entity-find entity-name="mantle.product.issuance.AssetReservation" list="existingResList">
                    <econdition field-name="testMachineOrderId"/>
                    <econdition field-name="testMachineOrderItemSeqId"/>
                </entity-find>
                <set field="resInfoList" from="[]"/>
                <set field="lotIdSet" from="new LinkedHashSet()"/>
                <set field="oldestLotExpire" from="null"/>
                <iterate list="existingResList" entry="existingRes">
                    <entity-find-one entity-name="mantle.product.asset.AssetLotAndMfgParty" value-field="assetLot">
                        <field-map field-name="assetId" from="existingRes.assetId"/>
                        <select-field field-name="lotId,pseudoId,lotNumber,manufacturedDate,expirationDate"/>
                    </entity-find-one>
                    <script><![CDATA[
                        if (assetLot?.lotId) lotIdSet.add(assetLot.lotId)
                        if (assetLot?.expirationDate != null && (oldestLotExpire == null || assetLot.expirationDate < oldestLotExpire))
                            oldestLotExpire = assetLot.expirationDate
                        resInfoList.add([existingRes: existingRes, assetLot: assetLot])
                        ]]></script>
                </iterate>

            <!-- returnable quantities and ReturnItems -->
            <entity-find entity-name="beiyelin.testmachine.TestMachineReturnItem" list="testMachineReturnItemList">
                <econdition field-name="testMachineOrderId"/>
                <econdition field-name="testMachineOrderItemSeqId"/>
                <econdition field-name="statusId" operator="not-equals" value="ReturnCancelled"/>
                <order-by field-name="testMachineOrderItemSeqId"/>
            </entity-find>
            <service-call name="beiyelin.testmachine.TestMachineReturnServices.calculate#OrderItemReturnable" out-map="returnableOut"
                          in-map="[testMachineOrderId:testMachineOrderItem.testMachineOrderId, testMachineOrderItemSeqId:testMachineOrderItem.testMachineOrderItemSeqId, orderItemBillingList:orderItemBillingList, testMachineReturnItemList:testMachineReturnItemList]"/>
            <set field="returnIdSet" from="new TreeSet()"/>
            <iterate list="testMachineReturnItemList" entry="testMachineReturnItem">
                <if condition="testMachineReturnItem.testMachineOrderItemSeqId != testMachineOrderItemSeqId">
                    <continue/>
                </if>
                <script>returnIdSet.add(testMachineReturnItem.returnId)</script>
            </iterate>

            <!-- <log level="warn" message="isShippable ${isShippable} testMachineOrderItem.quantity ${testMachineOrderItem.quantity} itemQuantityNotShipped ${itemQuantityNotShipped} itemQuantityNotBilled ${itemQuantityNotBilled} returnableOut.returnedQuantity ${returnableOut.returnedQuantity}"/> -->
            <set field="itemCanDelete"
                 from="( itemQuantityNotShipped == testMachineOrderItem.quantity)  &amp;&amp; returnableOut.returnedQuantity == 0.0"/>
        </actions>
    </service>

    <service verb="validate" noun="TestMachineOrder" type="interface">
        <in-parameters>
            <parameter name="testMachineOrderId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="approveWarnings" type="List">
                <parameter name="approveWarning"/>
            </parameter>
        </out-parameters>
    </service>
    <service verb="validate" noun="TestMachineOrderRequireManual">
        <implements service="beiyelin.testmachine.TestMachineOrderInfoServices.validate#TestMachineOrder"/>
        <actions>
            <set field="approveWarnings" from="[]"/>
            <script>approveWarnings.add(ec.resource.expand('OrderApproveStoreManualApprove', null))</script>
        </actions>
    </service>

    <service verb="check" noun="TestMachineOrderPreApprove">
        <description>A basic set of checks for possible issues before approving an order. Use an SECA on this service to
            do additional checks, adding to the approveWarnings List as needed.
        </description>
        <in-parameters>
            <parameter name="testMachineOrderId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="approveWarnings" type="List">
                <parameter name="approveWarning"/>
            </parameter>
        </out-parameters>
        <actions>
            <set field="approveWarnings" from="[]"/>

            <entity-find-one entity-name="beiyelin.testmachine.TestMachineOrderHeader" value-field="testMachineOrderHeader"/>
            <if condition="testMachineOrderHeader == null">
                <return/>
            </if>

            <set field="placedDate" from="testMachineOrderHeader.placedDate"/>
            <set field="currencyUomId" from="testMachineOrderHeader.currencyUomId"/>

            <set field="testMachineOrderItemList" from="testMachineOrderHeader.items"/>

            <set field="customerPartyId" from="firstOrderPart.customerPartyId"/>
            <set field="vendorPartyId" from="firstOrderPart.vendorPartyId"/>
            <entity-find-one entity-name="mantle.party.PartyRole" value-field="vendorOrgInternal">
                <field-map field-name="partyId" from="vendorPartyId"/>
                <field-map field-name="roleTypeId" value="OrgInternal"/>
            </entity-find-one>
            <set field="isVendorInternalOrg" from="vendorOrgInternal != null"/>


            <!-- don't go beyond here if there is no customer or vendor -->
            <set field="noCustomerOrVendor" from="false"/>
            <if condition="!vendorPartyId">
                <script>approveWarnings.add(ec.resource.expand('TestMachineOrderApproveNoVendor', null))</script>
                <set field="noCustomerOrVendor" from="true"/>
            </if>
            <if condition="!customerPartyId">
                <script>approveWarnings.add(ec.resource.expand('TestMachineOrderApproveNoCustomer', null))</script>
                <set field="noCustomerOrVendor" from="true"/>
            </if>

            <if condition="noCustomerOrVendor">
                <return/>
            </if>



<!--            &lt;!&ndash; get all shipping addresses &ndash;&gt;-->
<!--            <set field="shippingAddressIdSet" from="new HashSet(orderPartList*.postalContactMechId)"/>-->
<!--            <entity-find entity-name="mantle.party.contact.ContactMechPostalAddress" list="shippingAddressList">-->
<!--                <econdition field-name="contactMechId" operator="in" from="shippingAddressIdSet"/>-->
<!--            </entity-find>-->



            <!-- get AssetReservation records for various validations -->
            <entity-find entity-name="mantle.product.issuance.AssetReservation" list="assetResList">
                <econdition field-name="testMachineOrderId"/>
                <order-by field-name="testMachineOrderItemSeqId"/>
            </entity-find>

            <!-- are there any unavailable reservations? -->
            <set field="arUnavailableMap" from="[:]"/>
            <iterate list="assetResList" entry="assetRes">
                <if condition="assetRes.quantityNotAvailable">
                    <script>addToBigDecimalInMap(assetRes.testMachineOrderItemSeqId, assetRes.quantityNotAvailable, arUnavailableMap)</script>
                </if>
            </iterate>
            <iterate list="arUnavailableMap" key="testMachineOrderItemSeqId" entry="quantityNotAvailable">
                <set field="curOrderItem"
                     from="testMachineOrderItemList.find({ it.testMachineOrderItemSeqId == testMachineOrderItemSeqId })"/>
                <script>approveWarnings.add(ec.resource.expand(
                        'Item ${testMachineOrderItemSeqId} has ${ec.l10n.format(quantityNotAvailable, "0.##")} of ${ec.l10n.format(curOrderItem.quantity, "0.##")} not available in inventory', null))</script>
            </iterate>

        </actions>
    </service>

    <!-- ========== TestMachineOrder Notification Services ========== -->
<!--

    <service verb="send" noun="OrderStoreEmail" authenticate="anonymous-view">
        <description>Called by SECA rule in TestMachineOrderReturn.secas.xml on tx-commit so always run async from triggering
            thread
        </description>
        <in-parameters>
            <parameter name="testMachineOrderId" required="true"/>
            <parameter name="emailTypeEnumId" required="true"/>
            <parameter name="toAddresses">
                <text-email/>
            </parameter>
            <parameter name="forceByType" type="Boolean" default="false"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="beiyelin.testmachine.TestMachineOrderHeader" value-field="testMachineOrderHeader"/>
            <if condition="testMachineOrderHeader == null">
                <return/>
            </if>
            <set field="productStoreId" from="testMachineOrderHeader.productStoreId"/>
            <if condition="!productStoreId">
                <return/>
            </if>

&lt;!&ndash;            <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore">
                <field-map field-name="productStoreId"/>
            </entity-find-one>
            <entity-find entity-name="mantle.product.store.ProductStoreEmail" list="storeEmailList">
                <date-filter/>
                <econdition field-name="productStoreId"/>
                <econdition field-name="emailTypeEnumId"/>
            </entity-find>
            <if condition="storeEmailList">
                <set field="customerPartyId" from="testMachineOrderHeader.customerPartyId"/>

                &lt;!&ndash; get customer email address &ndash;&gt;
                <if condition="!toAddresses &amp;&amp; customerPartyId">
                    <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="emailInfo"
                                  in-map="[partyId:customerPartyId, emailContactMechPurposeId:'EmailOrder', defaultToPrimaryPurpose:true]"/>
                    <set field="toAddresses" from="emailInfo.emailAddress"/>
                    &lt;!&ndash; get customer userId for toUserId &ndash;&gt;
                    <entity-find entity-name="moqui.security.UserAccount" list="userAccountList" limit="1">
                        <econdition field-name="partyId" from="customerPartyId"/>
                    </entity-find>
                    <if condition="userAccountList">
                        <set field="toUserId" from="userAccountList[0].userId"/>
                    </if>
                </if>
                <if condition="!toAddresses">
                    <return message="Not sending email for order ${testMachineOrderId}, no to address specified or found for customer ${customerPartyId}"/>
                </if>

                &lt;!&ndash; send email for each configured &ndash;&gt;
                <iterate list="storeEmailList" entry="storeEmail">
                    <if condition="!storeEmail.emailTemplateId">
                        <continue/>
                    </if>

                    &lt;!&ndash; if email has already been sent (by testMachineOrderId, emailTypeEnumId) don't send again &ndash;&gt;
                    <if condition="!forceByType">
                        <entity-find entity-name="beiyelin.testmachine.TestMachineOrderEmailMessageDetail" list="existingMessages">
                            <econdition field-name="testMachineOrderId"/>
                            <econdition field-name="emailTypeEnumId"/>
                            <econdition field-name="statusId" operator="in" value="ES_SENT,ES_RECEIVED,ES_VIEWED"/>
                            <select-field field-name="emailMessageId"/>
                        </entity-find>
                        <if condition="existingMessages">
                            <message type="warning">Not sending ${emailTypeEnumId} email for order
                                ${testMachineOrderId}, found messages: ${existingMessages*.emailMessageId}
                            </message>
                            <continue/>
                        </if>
                    </if>

                    <set field="bccAddresses"
                         from="testMachineOrderHeader.salesChannelEnumId in ['ScWeb', 'ScWebExternal'] ? storeEmail.webOrderBcc : null"/>

                    &lt;!&ndash; simple bodyParameters, let the screen do data prep &ndash;&gt;
                    <set field="bodyParameters" from="[testMachineOrderId:testMachineOrderId, storeDomain:productStore.storeDomain,
                        profileUrlPath:productStore.profileUrlPath, headerImagePath:storeEmail.headerImagePath,
                        detailLinkPath:storeEmail.detailLinkPath]"/>

                    <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" out-map="sendOut"
                                  out-map-add-to-existing="false"
                                  in-map="[emailTemplateId:storeEmail.emailTemplateId, emailTypeEnumId:emailTypeEnumId, toAddresses:toAddresses,
                                bccAddresses:bccAddresses, bodyParameters:bodyParameters, toUserId:toUserId]"/>
                    <script>if (sendOut.emailMessageId) {
                        ec.service.sync().name("create#beiyelin.testmachine.TestMachineOrderEmailMessage").parameter("testMachineOrderId", testMachineOrderId)
                                .parameter("emailMessageId", sendOut.emailMessageId).parameter("orderRevision", testMachineOrderHeader.orderRevision).disableAuthz().call()
                    }</script>
                    <message>Email sent to
                        ${toAddresses}${sendOut.emailMessageId ? ', message ID ' + sendOut.emailMessageId : ''}
                    </message>
                </iterate>
            </if>&ndash;&gt;
        </actions>
    </service>
-->

<!--    <service verb="notify" noun="OrderHighPriority" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="testMachineOrderId" required="true"/>
            <parameter name="orderPartSeqId"/>
            <parameter name="priorityMax" type="Integer" default="1"/>
            <parameter name="notificationTopic" default-value="OrderHighPriority"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mantle.order.OrderPart" list="orderPartList">
                <econdition field-name="testMachineOrderId"/>
                <econdition field-name="orderPartSeqId" ignore-if-empty="true"/>
            </entity-find>
            <iterate list="orderPartList" entry="orderPart">
                <if condition="orderPart.priority &gt; priorityMax">
                    <continue/>
                </if>
                &lt;!&ndash; NOTE: title not expanded here, let NotificationMessage expand it from the 'message' Map &ndash;&gt;
                <set field="title"
                     from="'High Priority TestMachineOrder ${testMachineOrderId}:${orderPartSeqId} - Priority ${priority}'"/>
                <script><![CDATA[
                    def nm = ec.makeNotificationMessage().topic((String) notificationTopic)
                            .message([testMachineOrderId: testMachineOrderId, orderPartSeqId: orderPart.orderPartSeqId, priority: orderPart.priority])
                    nm.send()
                    ]]></script>
            </iterate>
        </actions>
    </service>-->
</services>
